// Configuration File
manifest {
    author = 'Phelelani Mpangase'
    homePage = 'https://github.com/phelelani/nf-rnaSeqCount'
    description = 'rnaSeqCount pipeline'
    mainScript = 'main.nf'
    version = '0.2'
}

// CHECK INPUTS AND OUTPUTS:
params {
    data       = null
    out        = null
    genome     = null
    genes      = null
    help       = null
    mode       = null
    from       = null
    pairedEnd  = null
    singleEnd  = null
    
    // WORKFLOW STEPS PARAMETERS
    trim       = null
    
    // RESOURCES
    max_memory = 200.GB
    max_cpus   = 24
    max_time   = 24.h
}

//  FUNCTION TO ENSURE THAT RESOURCE REQUIREMENTS DON'T GO BEYOND A MAXIMUM LIMIT
def check_max(obj, type) {
    if(type == 'memory'){
        try {
            if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
            return params.max_memory as nextflow.util.MemoryUnit
            else
            return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if(type == 'time'){
        try {
            if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
            return params.max_time as nextflow.util.Duration
            else
            return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if(type == 'cpus'){
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}


// CHECK INPUT AND OUTPUT PATHS
def checkPaths() {
    def bind_dirs = []

    // CHECK DATA INPUT DIR
    if(params.data == null) {
        // DO NOTHING!
    } else{
        data_dir = new File("${params.data}")
        bind_dirs.add("${data_dir}")
    }
    // CHECK DATA OUTPUT DIR
    if(params.out == null) {
        out_dir = new File("$PWD/results_nf-rnaSeqCount")
    } else{
        out_dir = new File("${params.out}")
        bind_dirs.add("${out_dir}")
    }
    // CHECK GENOME
    if(params.genome == null) {
        // DO NOTHING!
    } else{
        genome_dir = new File("${params.genome}").getParent()
        bind_dirs.add("${genome_dir}")
    }
    
    // CHECK GENES
    if(params.genes == null) {
        // DO NOTHING!
    } else{
        genes_dir = new File("${params.genes}").getParent()
        bind_dirs.add("${genes_dir}")
    }    

    // BIND GENOME AND GENES DIR
    if (bind_dirs.isEmpty()) {
        dirs = " "
    } else{
        dirs = bind_dirs.unique().collect { it -> "-B ${it}"}.join(" ").toString()
    }
    return [ bind_dirs, out_dir ]
}

// SINGULARITY OPTIONS
def singularityOptions() {
    singularity {
        enabled = true
        cacheDir = "$HOME/.singularity/cache"
        runOptions = "$dirs" + " --cleanenv"
        autoMounts = true
    }
}

// PIPELINE TRACING, VISUALIZATION AND HELP
def pipelineHelp() {
    if(params.help || params.mode == null) {
    } else if(params.mode in ['prep.Containers',
                              'prep.Indexes',
                              'run.ReadQC',
                              'run.ReadTrimming',
                              'run.ReadAlignment',
                              'run.ReadCounting',
                              'run.MultiQC']) {
        trace {
            enabled = true
            file = "${out_dir}/workflow-tracing/${params.mode}_trace.txt"
        }
        timeline {
            enabled = true
            file = "${out_dir}/workflow-tracing/${params.mode}_timeline.html"
        }
        report {
            enabled = true
            file = "${out_dir}/workflow-tracing/${params.mode}_report.html"
        }
    } else{}
}

// ALL PROCESSESS SETTINGS
process {
    // ALL PROCESSES
    cache = true
    stageInMode = 'symlink'
    stageOutMode = 'rsync'
    scratch = 'false'
    // maxForks = 10

    // SPECIAL RESOURCE REQUIREMENTS
    withLabel: 'mini' {
        cpus = { check_max( 1 * task.attempt, 'cpus' ) }
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        time = { check_max( 4.h * task.attempt, 'time' ) }
    }   
    withLabel: 'midi' {
        cpus = { check_max( 12 * task.attempt, 'cpus' ) }
        memory = { check_max( 12.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h * task.attempt, 'time' ) }        
    }   
    withLabel: 'maxi' {
        cpus = { check_max( 12 * task.attempt, 'cpus' ) }
        memory = { check_max( 48.GB * task.attempt, 'memory' ) }
        time = { check_max( 48.h * task.attempt, 'time' ) }
    }
    // CONTAINERS
    withName:run_GenerateSTARIndex {
        container = 'file:///$HOME/.singularity/cache/nf-rnaseqcount_star.sif'
    }
    withName:run_GenerateBowtie2Index {
        container = 'file:///$HOME/.singularity/cache/nf-rnaseqcount_bowtie2.sif'
    }
    withName:run_QualityChecks {
        container = 'file:///$HOME/.singularity/cache/nf-rnaseqcount_fastqc.sif'
    }
    withName:run_ReadTrimming {
        container = 'file:///$HOME/.singularity/cache/nf-rnaseqcount_trimmomatic.sif'
    }
    withName:run_STAR {
        container = 'file:///$HOME/.singularity/cache/nf-rnaseqcount_star.sif'
    }
    withName:run_HTSeqCount {
        container = 'file:///$HOME/.singularity/cache/nf-rnaseqcount_htseqcount.sif'
    }
    withName:run_FeatureCounts {
        container = 'file:///$HOME/.singularity/cache/nf-rnaseqcount_featurecounts.sif'
    }
    withName:run_MultiQC {
        container = 'file:///$HOME/.singularity/cache/nf-rnaseqcount_multiqc.sif'
    }
}

// PROFILES AND PROCESS OPTIONS
profiles {
    standard {
        executor = 'local'
        checkPaths()
        singularityOptions()
        pipelineHelp()
    }
    slurm {
        executor = 'slurm'
        queue = 'batch'
        checkPaths()
        singularityOptions()
        pipelineHelp()
    }
}
